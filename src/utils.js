"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const s4 = () => {
    return Math.floor((1 + Math.random()) * 0x10000)
        .toString(16)
        .substring(1);
};
exports.guidShort = () => {
    // Prepend with letter to ensure parsed as a string and preserve
    // insertion order when calling Object.keys -JDK 12/1/2016
    // http://stackoverflow.com/questions/5525795/does-javascript-guarantee-object-property-order
    return "a" + s4() + s4();
};
exports.forEach = (obj, func) => {
    if (!obj) {
        return;
    }
    Object.entries(obj).map((i) => {
        func(i[1], i[0]);
    });
};
exports.toArray = (obj, sortField, reverse = false) => {
    let arr = [];
    if (Array.isArray(obj)) {
        arr = obj;
    }
    else {
        arr = Object.entries(obj || {}).map((i) => i[1]);
    }
    if (sortField) {
        arr.sort((a, b) => {
            const a1 = exports.getProperty(a, sortField);
            const b1 = exports.getProperty(b, sortField);
            if (a1 < b1) {
                return reverse ? 1 : -1;
            }
            else if (a1 > b1) {
                return reverse ? -1 : 1;
            }
            return 0;
        });
    }
    return arr;
};
exports.group = (items, prop, groupVals) => {
    const groups = {};
    if (Array.isArray(groupVals)) {
        groupVals.forEach((groupVal) => {
            groups[groupVal] = { key: groupVal, items: [] };
        });
    }
    exports.toArray(items).forEach((item) => {
        let val;
        if (typeof prop === "function") {
            val = prop(item);
        }
        else {
            val = exports.getProperty(item, prop);
        }
        if (!groups[val]) {
            groups[val] = { key: val, items: [] };
        }
        groups[val].items.push(item);
    });
    return groups;
};
const getPropertyHelper = (obj, split) => {
    if (obj == null) {
        return null;
    }
    if (split.length === 1) {
        return obj[split[0]];
    }
    return getPropertyHelper(obj[split[0]], split.slice(1, split.length));
};
exports.getProperty = (obj, path) => {
    if (!path) {
        return obj;
    }
    return getPropertyHelper(obj, path.split("."));
};
const setPropertyHelper = (obj, split, value) => {
    if (obj == null) {
        return;
    }
    if (split.length === 1) {
        obj[split[0]] = value;
    }
    else {
        setPropertyHelper(obj[split[0]], split.slice(1, split.length), value);
    }
};
exports.setProperty = (obj, path, value) => {
    return setPropertyHelper(obj, path.split("."), value);
};
exports.round = (value, decimals = 0) => {
    // console.log("round", value, value.toFixed(precision), parseFloat(value.toFixed(precision)));
    // return parseFloat(value.toFixed(precision));
    return Number(Math.round((value + "e" + decimals)) + "e-" + decimals);
};
exports.randomInt = (min, max) => {
    // inclusive of min and max
    min = Math.ceil(min);
    max = Math.floor(max);
    return Math.floor(Math.random() * (max - min + 1)) + min;
};
exports.formatCurrency = (value, precision = 2, emptyString = "") => {
    if (value === "") {
        // console.log("val is empty string", value, emptyString);
        if (emptyString != null) {
            return emptyString;
        }
        else {
            value = 0;
        }
    }
    const valueAsNumber = (typeof value === "string") ? parseInt(value, 10) : value;
    if (typeof valueAsNumber !== "number" || isNaN(valueAsNumber)) {
        return emptyString;
    }
    return exports.numberWithCommas(valueAsNumber.toFixed(precision));
};
exports.numberWithCommas = (x) => {
    if (typeof x === "number") {
        x = x.toString();
    }
    if (typeof x !== "string") {
        return "";
    }
    const split = x.split(".");
    split[0] = split[0].replace(/\B(?=(\d{3})+(?!\d))/g, ",");
    return split.join(".");
};
exports.deepCopy = (obj) => {
    return JSON.parse(JSON.stringify(obj));
};
exports.getTotalFields = (item, fields) => {
    const total = fields.reduce((acc, curr) => item[curr] + acc, 0);
    return exports.round(total, 2);
};
exports.getTotal = (items, fields) => {
    const total = exports.toArray(items).reduce((acc, curr) => (exports.getTotalFields(curr, fields)) + acc, 0);
    return exports.round(total, 2);
};
exports.BuildTypescriptModel = (obj) => {
    let str = "";
    Object.entries(obj).sort((a, b) => a[0] > b[0] ? 1 : 0).forEach((entry) => {
        str += `${entry[0]}: ${typeof entry[1] === "number" ? "number" : "string"};\n`;
    });
    return str;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ1dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUVBLE1BQU0sRUFBRSxHQUFHLEdBQVcsRUFBRTtJQUNwQixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsT0FBTyxDQUFDO1NBQzNDLFFBQVEsQ0FBQyxFQUFFLENBQUM7U0FDWixTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdEIsQ0FBQyxDQUFDO0FBRVcsUUFBQSxTQUFTLEdBQUcsR0FBVyxFQUFFO0lBQ2xDLGdFQUFnRTtJQUNoRSwwREFBMEQ7SUFDMUQsNkZBQTZGO0lBQzdGLE9BQU8sR0FBRyxHQUFHLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDO0FBQzdCLENBQUMsQ0FBQztBQUVXLFFBQUEsT0FBTyxHQUFHLENBQUMsR0FBUSxFQUFFLElBQXNDLEVBQVEsRUFBRTtJQUM5RSxJQUFJLENBQUMsR0FBRyxFQUFFO1FBQ04sT0FBTztLQUNWO0lBQ0QsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtRQUMxQixJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQVcsQ0FBQyxDQUFDO0lBQy9CLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyxDQUFDO0FBRVcsUUFBQSxPQUFPLEdBQUcsQ0FBSSxHQUFtQixFQUFFLFNBQWtCLEVBQUUsVUFBbUIsS0FBSyxFQUFPLEVBQUU7SUFDakcsSUFBSSxHQUFHLEdBQUcsRUFBRSxDQUFDO0lBQ2IsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1FBQ3BCLEdBQUcsR0FBRyxHQUFHLENBQUM7S0FDYjtTQUFNO1FBQ0gsR0FBRyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENB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