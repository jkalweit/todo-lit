{"version":3,"file":"bundle.js","sources":["../../../../node_modules/lit-html/src/lib/directive.ts","../../../../node_modules/lit-html/src/lib/dom.ts","../../../../node_modules/lit-html/src/lib/part.ts","../../../../node_modules/lit-html/src/lib/template.ts","../../../../node_modules/lit-html/src/lib/template-instance.ts","../../../../node_modules/lit-html/src/lib/template-result.ts","../../../../node_modules/lit-html/src/lib/parts.ts","../../../../node_modules/lit-html/src/lib/default-template-processor.ts","../../../../node_modules/lit-html/src/lib/template-factory.ts","../../../../node_modules/lit-html/src/lib/render.ts","../../../../node_modules/lit-html/src/lit-html.ts","../../home/client/nav.ts","../../../utils.ts","../../../../node_modules/lit-html/src/directives/repeat.ts","../../utils-browser.ts","../../api-keyval-client.ts","../client/store.ts","../client/todo.ts","../client/app.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {Part} from './part.js';\n\nconst directives = new WeakMap<object, true>();\n\n// tslint:disable-next-line:no-any\nexport type DirectiveFactory = (...args: any[]) => object;\n\nexport type DirectiveFn = (part: Part) => void;\n\n/**\n * Brands a function as a directive factory function so that lit-html will call\n * the function during template rendering, rather than passing as a value.\n *\n * A _directive_ is a function that takes a Part as an argument. It has the\n * signature: `(part: Part) => void`.\n *\n * A directive _factory_ is a function that takes arguments for data and\n * configuration and returns a directive. Users of directive usually refer to\n * the directive factory as the directive. For example, \"The repeat directive\".\n *\n * Usually a template author will invoke a directive factory in their template\n * with relevant arguments, which will then return a directive function.\n *\n * Here's an example of using the `repeat()` directive factory that takes an\n * array and a function to render an item:\n *\n * ```js\n * html`<ul><${repeat(items, (item) => html`<li>${item}</li>`)}</ul>`\n * ```\n *\n * When `repeat` is invoked, it returns a directive function that closes over\n * `items` and the template function. When the outer template is rendered, the\n * return directive function is called with the Part for the expression.\n * `repeat` then performs it's custom logic to render multiple items.\n *\n * @param f The directive factory function. Must be a function that returns a\n * function of the signature `(part: Part) => void`. The returned function will\n * be called with the part object.\n *\n * @example\n *\n * import {directive, html} from 'lit-html';\n *\n * const immutable = directive((v) => (part) => {\n *   if (part.value !== v) {\n *     part.setValue(v)\n *   }\n * });\n */\nexport const directive = <F extends DirectiveFactory>(f: F): F =>\n    ((...args: unknown[]) => {\n      const d = f(...args);\n      directives.set(d, true);\n      return d;\n    }) as F;\n\nexport const isDirective = (o: unknown): o is DirectiveFn => {\n  return typeof o === 'function' && directives.has(o);\n};\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\ninterface MaybePolyfilledCe extends CustomElementRegistry {\n  readonly polyfillWrapFlushCallback?: object;\n}\n\n/**\n * True if the custom elements polyfill is in use.\n */\nexport const isCEPolyfill = window.customElements !== undefined &&\n    (window.customElements as MaybePolyfilledCe).polyfillWrapFlushCallback !==\n        undefined;\n\n/**\n * Reparents nodes, starting from `start` (inclusive) to `end` (exclusive),\n * into another container (could be the same container), before `before`. If\n * `before` is null, it appends the nodes to the container.\n */\nexport const reparentNodes =\n    (container: Node,\n     start: Node|null,\n     end: Node|null = null,\n     before: Node|null = null): void => {\n      while (start !== end) {\n        const n = start!.nextSibling;\n        container.insertBefore(start!, before);\n        start = n;\n      }\n    };\n\n/**\n * Removes nodes, starting from `start` (inclusive) to `end` (exclusive), from\n * `container`.\n */\nexport const removeNodes =\n    (container: Node, start: Node|null, end: Node|null = null): void => {\n      while (start !== end) {\n        const n = start!.nextSibling;\n        container.removeChild(start!);\n        start = n;\n      }\n    };\n","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\n/**\n * The Part interface represents a dynamic part of a template instance rendered\n * by lit-html.\n */\nexport interface Part {\n  readonly value: unknown;\n\n  /**\n   * Sets the current part value, but does not write it to the DOM.\n   * @param value The value that will be committed.\n   */\n  setValue(value: unknown): void;\n\n  /**\n   * Commits the current part value, causing it to actually be written to the\n   * DOM.\n   *\n   * Directives are run at the start of `commit`, so that if they call\n   * `part.setValue(...)` synchronously that value will be used in the current\n   * commit, and there's no need to call `part.commit()` within the directive.\n   * If directives set a part value asynchronously, then they must call\n   * `part.commit()` manually.\n   */\n  commit(): void;\n}\n\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n\n/**\n * A sentinel value that signals a NodePart to fully clear its content.\n */\nexport const nothing = {};\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {TemplateResult} from './template-result.js';\n\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n\n/**\n * An expression marker used text-positions, multi-binding attributes, and\n * attributes with markup-like text values.\n */\nexport const nodeMarker = `<!--${marker}-->`;\n\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n\n/**\n * Suffix appended to all bound attribute names.\n */\nexport const boundAttributeSuffix = '$lit$';\n\n/**\n * An updateable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n  readonly parts: TemplatePart[] = [];\n  readonly element: HTMLTemplateElement;\n\n  constructor(result: TemplateResult, element: HTMLTemplateElement) {\n    this.element = element;\n\n    const nodesToRemove: Node[] = [];\n    const stack: Node[] = [];\n    // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n    const walker = document.createTreeWalker(\n        element.content,\n        133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */,\n        null,\n        false);\n    // Keeps track of the last index associated with a part. We try to delete\n    // unnecessary nodes, but we never want to associate two different parts\n    // to the same index. They must have a constant node between.\n    let lastPartIndex = 0;\n    let index = -1;\n    let partIndex = 0;\n    const {strings, values: {length}} = result;\n    while (partIndex < length) {\n      const node = walker.nextNode() as Element | Comment | Text | null;\n      if (node === null) {\n        // We've exhausted the content inside a nested template element.\n        // Because we still have parts (the outer for-loop), we know:\n        // - There is a template in the stack\n        // - The walker will find a nextNode outside the template\n        walker.currentNode = stack.pop()!;\n        continue;\n      }\n      index++;\n\n      if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n        if ((node as Element).hasAttributes()) {\n          const attributes = (node as Element).attributes;\n          const {length} = attributes;\n          // Per\n          // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n          // attributes are not guaranteed to be returned in document order.\n          // In particular, Edge/IE can return them out of order, so we cannot\n          // assume a correspondence between part index and attribute index.\n          let count = 0;\n          for (let i = 0; i < length; i++) {\n            if (endsWith(attributes[i].name, boundAttributeSuffix)) {\n              count++;\n            }\n          }\n          while (count-- > 0) {\n            // Get the template literal section leading up to the first\n            // expression in this attribute\n            const stringForPart = strings[partIndex];\n            // Find the attribute name\n            const name = lastAttributeNameRegex.exec(stringForPart)![2];\n            // Find the corresponding attribute\n            // All bound attributes have had a suffix added in\n            // TemplateResult#getHTML to opt out of special attribute\n            // handling. To look up the attribute value we also need to add\n            // the suffix.\n            const attributeLookupName =\n                name.toLowerCase() + boundAttributeSuffix;\n            const attributeValue =\n                (node as Element).getAttribute(attributeLookupName)!;\n            (node as Element).removeAttribute(attributeLookupName);\n            const statics = attributeValue.split(markerRegex);\n            this.parts.push({type: 'attribute', index, name, strings: statics});\n            partIndex += statics.length - 1;\n          }\n        }\n        if ((node as Element).tagName === 'TEMPLATE') {\n          stack.push(node);\n          walker.currentNode = (node as HTMLTemplateElement).content;\n        }\n      } else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n        const data = (node as Text).data;\n        if (data.indexOf(marker) >= 0) {\n          const parent = node.parentNode!;\n          const strings = data.split(markerRegex);\n          const lastIndex = strings.length - 1;\n          // Generate a new text node for each literal section\n          // These nodes are also used as the markers for node parts\n          for (let i = 0; i < lastIndex; i++) {\n            let insert: Node;\n            let s = strings[i];\n            if (s === '') {\n              insert = createMarker();\n            } else {\n              const match = lastAttributeNameRegex.exec(s);\n              if (match !== null && endsWith(match[2], boundAttributeSuffix)) {\n                s = s.slice(0, match.index) + match[1] +\n                    match[2].slice(0, -boundAttributeSuffix.length) + match[3];\n              }\n              insert = document.createTextNode(s);\n            }\n            parent.insertBefore(insert, node);\n            this.parts.push({type: 'node', index: ++index});\n          }\n          // If there's no text, we must insert a comment to mark our place.\n          // Else, we can trust it will stick around after cloning.\n          if (strings[lastIndex] === '') {\n            parent.insertBefore(createMarker(), node);\n            nodesToRemove.push(node);\n          } else {\n            (node as Text).data = strings[lastIndex];\n          }\n          // We have a part for each match found\n          partIndex += lastIndex;\n        }\n      } else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n        if ((node as Comment).data === marker) {\n          const parent = node.parentNode!;\n          // Add a new marker node to be the startNode of the Part if any of\n          // the following are true:\n          //  * We don't have a previousSibling\n          //  * The previousSibling is already the start of a previous part\n          if (node.previousSibling === null || index === lastPartIndex) {\n            index++;\n            parent.insertBefore(createMarker(), node);\n          }\n          lastPartIndex = index;\n          this.parts.push({type: 'node', index});\n          // If we don't have a nextSibling, keep this node so we have an end.\n          // Else, we can remove it to save future costs.\n          if (node.nextSibling === null) {\n            (node as Comment).data = '';\n          } else {\n            nodesToRemove.push(node);\n            index--;\n          }\n          partIndex++;\n        } else {\n          let i = -1;\n          while ((i = (node as Comment).data.indexOf(marker, i + 1)) !== -1) {\n            // Comment node has a binding marker inside, make an inactive part\n            // The binding won't work, but subsequent bindings will\n            // TODO (justinfagnani): consider whether it's even worth it to\n            // make bindings in comments work\n            this.parts.push({type: 'node', index: -1});\n            partIndex++;\n          }\n        }\n      }\n    }\n\n    // Remove text binding nodes after the walk to not disturb the TreeWalker\n    for (const n of nodesToRemove) {\n      n.parentNode!.removeChild(n);\n    }\n  }\n}\n\nconst endsWith = (str: string, suffix: string): boolean => {\n  const index = str.length - suffix.length;\n  return index >= 0 && str.slice(index) === suffix;\n};\n\n/**\n * A placeholder for a dynamic expression in an HTML template.\n *\n * There are two built-in part types: AttributePart and NodePart. NodeParts\n * always represent a single dynamic expression, while AttributeParts may\n * represent as many expressions are contained in the attribute.\n *\n * A Template's parts are mutable, so parts can be replaced or modified\n * (possibly to implement different template semantics). The contract is that\n * parts can only be replaced, not removed, added or reordered, and parts must\n * always consume the correct number of values in their `update()` method.\n *\n * TODO(justinfagnani): That requirement is a little fragile. A\n * TemplateInstance could instead be more careful about which values it gives\n * to Part.update().\n */\nexport type TemplatePart = {\n  readonly type: 'node',\n  index: number\n}|{readonly type: 'attribute', index: number, readonly name: string, readonly strings: ReadonlyArray<string>};\n\nexport const isTemplatePartActive = (part: TemplatePart) => part.index !== -1;\n\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-characters\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters, which includes every\n * space character except \" \".\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex =\n    /([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {isCEPolyfill} from './dom.js';\nimport {Part} from './part.js';\nimport {RenderOptions} from './render-options.js';\nimport {TemplateProcessor} from './template-processor.js';\nimport {isTemplatePartActive, Template, TemplatePart} from './template.js';\n\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n  private readonly __parts: Array<Part|undefined> = [];\n  readonly processor: TemplateProcessor;\n  readonly options: RenderOptions;\n  readonly template: Template;\n\n  constructor(\n      template: Template, processor: TemplateProcessor,\n      options: RenderOptions) {\n    this.template = template;\n    this.processor = processor;\n    this.options = options;\n  }\n\n  update(values: ReadonlyArray<unknown>) {\n    let i = 0;\n    for (const part of this.__parts) {\n      if (part !== undefined) {\n        part.setValue(values[i]);\n      }\n      i++;\n    }\n    for (const part of this.__parts) {\n      if (part !== undefined) {\n        part.commit();\n      }\n    }\n  }\n\n  _clone(): DocumentFragment {\n    // There are a number of steps in the lifecycle of a template instance's\n    // DOM fragment:\n    //  1. Clone - create the instance fragment\n    //  2. Adopt - adopt into the main document\n    //  3. Process - find part markers and create parts\n    //  4. Upgrade - upgrade custom elements\n    //  5. Update - set node, attribute, property, etc., values\n    //  6. Connect - connect to the document. Optional and outside of this\n    //     method.\n    //\n    // We have a few constraints on the ordering of these steps:\n    //  * We need to upgrade before updating, so that property values will pass\n    //    through any property setters.\n    //  * We would like to process before upgrading so that we're sure that the\n    //    cloned fragment is inert and not disturbed by self-modifying DOM.\n    //  * We want custom elements to upgrade even in disconnected fragments.\n    //\n    // Given these constraints, with full custom elements support we would\n    // prefer the order: Clone, Process, Adopt, Upgrade, Update, Connect\n    //\n    // But Safari dooes not implement CustomElementRegistry#upgrade, so we\n    // can not implement that order and still have upgrade-before-update and\n    // upgrade disconnected fragments. So we instead sacrifice the\n    // process-before-upgrade constraint, since in Custom Elements v1 elements\n    // must not modify their light DOM in the constructor. We still have issues\n    // when co-existing with CEv0 elements like Polymer 1, and with polyfills\n    // that don't strictly adhere to the no-modification rule because shadow\n    // DOM, which may be created in the constructor, is emulated by being placed\n    // in the light DOM.\n    //\n    // The resulting order is on native is: Clone, Adopt, Upgrade, Process,\n    // Update, Connect. document.importNode() performs Clone, Adopt, and Upgrade\n    // in one step.\n    //\n    // The Custom Elements v1 polyfill supports upgrade(), so the order when\n    // polyfilled is the more ideal: Clone, Process, Adopt, Upgrade, Update,\n    // Connect.\n\n    const fragment = isCEPolyfill ?\n        this.template.element.content.cloneNode(true) as DocumentFragment :\n        document.importNode(this.template.element.content, true);\n\n    const stack: Node[] = [];\n    const parts = this.template.parts;\n    // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n    const walker = document.createTreeWalker(\n        fragment,\n        133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */,\n        null,\n        false);\n    let partIndex = 0;\n    let nodeIndex = 0;\n    let part: TemplatePart;\n    let node = walker.nextNode();\n    // Loop through all the nodes and parts of a template\n    while (partIndex < parts.length) {\n      part = parts[partIndex];\n      if (!isTemplatePartActive(part)) {\n        this.__parts.push(undefined);\n        partIndex++;\n        continue;\n      }\n\n      // Progress the tree walker until we find our next part's node.\n      // Note that multiple parts may share the same node (attribute parts\n      // on a single element), so this loop may not run at all.\n      while (nodeIndex < part.index) {\n        nodeIndex++;\n        if (node!.nodeName === 'TEMPLATE') {\n          stack.push(node!);\n          walker.currentNode = (node as HTMLTemplateElement).content;\n        }\n        if ((node = walker.nextNode()) === null) {\n          // We've exhausted the content inside a nested template element.\n          // Because we still have parts (the outer for-loop), we know:\n          // - There is a template in the stack\n          // - The walker will find a nextNode outside the template\n          walker.currentNode = stack.pop()!;\n          node = walker.nextNode();\n        }\n      }\n\n      // We've arrived at our part's node.\n      if (part.type === 'node') {\n        const part = this.processor.handleTextExpression(this.options);\n        part.insertAfterNode(node!.previousSibling!);\n        this.__parts.push(part);\n      } else {\n        this.__parts.push(...this.processor.handleAttributeExpressions(\n            node as Element, part.name, part.strings, this.options));\n      }\n      partIndex++;\n    }\n\n    if (isCEPolyfill) {\n      document.adoptNode(fragment);\n      customElements.upgrade(fragment);\n    }\n    return fragment;\n  }\n}\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {reparentNodes} from './dom.js';\nimport {TemplateProcessor} from './template-processor.js';\nimport {boundAttributeSuffix, lastAttributeNameRegex, marker, nodeMarker} from './template.js';\n\nconst commentMarker = ` ${marker} `;\n\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n  readonly strings: TemplateStringsArray;\n  readonly values: ReadonlyArray<unknown>;\n  readonly type: string;\n  readonly processor: TemplateProcessor;\n\n  constructor(\n      strings: TemplateStringsArray, values: ReadonlyArray<unknown>,\n      type: string, processor: TemplateProcessor) {\n    this.strings = strings;\n    this.values = values;\n    this.type = type;\n    this.processor = processor;\n  }\n\n  /**\n   * Returns a string of HTML used to create a `<template>` element.\n   */\n  getHTML(): string {\n    const l = this.strings.length - 1;\n    let html = '';\n    let isCommentBinding = false;\n\n    for (let i = 0; i < l; i++) {\n      const s = this.strings[i];\n      // For each binding we want to determine the kind of marker to insert\n      // into the template source before it's parsed by the browser's HTML\n      // parser. The marker type is based on whether the expression is in an\n      // attribute, text, or comment poisition.\n      //   * For node-position bindings we insert a comment with the marker\n      //     sentinel as its text content, like <!--{{lit-guid}}-->.\n      //   * For attribute bindings we insert just the marker sentinel for the\n      //     first binding, so that we support unquoted attribute bindings.\n      //     Subsequent bindings can use a comment marker because multi-binding\n      //     attributes must be quoted.\n      //   * For comment bindings we insert just the marker sentinel so we don't\n      //     close the comment.\n      //\n      // The following code scans the template source, but is *not* an HTML\n      // parser. We don't need to track the tree structure of the HTML, only\n      // whether a binding is inside a comment, and if not, if it appears to be\n      // the first binding in an attribute.\n      const commentOpen = s.lastIndexOf('<!--');\n      // We're in comment position if we have a comment open with no following\n      // comment close. Because <-- can appear in an attribute value there can\n      // be false positives.\n      isCommentBinding = (commentOpen > -1 || isCommentBinding) &&\n          s.indexOf('-->', commentOpen + 1) === -1;\n      // Check to see if we have an attribute-like sequence preceeding the\n      // expression. This can match \"name=value\" like structures in text,\n      // comments, and attribute values, so there can be false-positives.\n      const attributeMatch = lastAttributeNameRegex.exec(s);\n      if (attributeMatch === null) {\n        // We're only in this branch if we don't have a attribute-like\n        // preceeding sequence. For comments, this guards against unusual\n        // attribute values like <div foo=\"<!--${'bar'}\">. Cases like\n        // <!-- foo=${'bar'}--> are handled correctly in the attribute branch\n        // below.\n        html += s + (isCommentBinding ? commentMarker : nodeMarker);\n      } else {\n        // For attributes we use just a marker sentinel, and also append a\n        // $lit$ suffix to the name to opt-out of attribute-specific parsing\n        // that IE and Edge do for style and certain SVG attributes.\n        html += s.substr(0, attributeMatch.index) + attributeMatch[1] +\n            attributeMatch[2] + boundAttributeSuffix + attributeMatch[3] +\n            marker;\n      }\n    }\n    html += this.strings[l];\n    return html;\n  }\n\n  getTemplateElement(): HTMLTemplateElement {\n    const template = document.createElement('template');\n    template.innerHTML = this.getHTML();\n    return template;\n  }\n}\n\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTML in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n  getHTML(): string {\n    return `<svg>${super.getHTML()}</svg>`;\n  }\n\n  getTemplateElement(): HTMLTemplateElement {\n    const template = super.getTemplateElement();\n    const content = template.content;\n    const svgElement = content.firstChild!;\n    content.removeChild(svgElement);\n    reparentNodes(content, svgElement.firstChild);\n    return template;\n  }\n}\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {isDirective} from './directive.js';\nimport {removeNodes} from './dom.js';\nimport {noChange, nothing, Part} from './part.js';\nimport {RenderOptions} from './render-options.js';\nimport {TemplateInstance} from './template-instance.js';\nimport {TemplateResult} from './template-result.js';\nimport {createMarker} from './template.js';\n\n// https://tc39.github.io/ecma262/#sec-typeof-operator\nexport type Primitive = null|undefined|boolean|number|string|Symbol|bigint;\nexport const isPrimitive = (value: unknown): value is Primitive => {\n  return (\n      value === null ||\n      !(typeof value === 'object' || typeof value === 'function'));\n};\nexport const isIterable = (value: unknown): value is Iterable<unknown> => {\n  return Array.isArray(value) ||\n      // tslint:disable-next-line:no-any\n      !!(value && (value as any)[Symbol.iterator]);\n};\n\n/**\n * Writes attribute values to the DOM for a group of AttributeParts bound to a\n * single attibute. The value is only set once even if there are multiple parts\n * for an attribute.\n */\nexport class AttributeCommitter {\n  readonly element: Element;\n  readonly name: string;\n  readonly strings: ReadonlyArray<string>;\n  readonly parts: ReadonlyArray<AttributePart>;\n  dirty = true;\n\n  constructor(element: Element, name: string, strings: ReadonlyArray<string>) {\n    this.element = element;\n    this.name = name;\n    this.strings = strings;\n    this.parts = [];\n    for (let i = 0; i < strings.length - 1; i++) {\n      (this.parts as AttributePart[])[i] = this._createPart();\n    }\n  }\n\n  /**\n   * Creates a single part. Override this to create a differnt type of part.\n   */\n  protected _createPart(): AttributePart {\n    return new AttributePart(this);\n  }\n\n  protected _getValue(): unknown {\n    const strings = this.strings;\n    const l = strings.length - 1;\n    let text = '';\n\n    for (let i = 0; i < l; i++) {\n      text += strings[i];\n      const part = this.parts[i];\n      if (part !== undefined) {\n        const v = part.value;\n        if (isPrimitive(v) || !isIterable(v)) {\n          text += typeof v === 'string' ? v : String(v);\n        } else {\n          for (const t of v) {\n            text += typeof t === 'string' ? t : String(t);\n          }\n        }\n      }\n    }\n\n    text += strings[l];\n    return text;\n  }\n\n  commit(): void {\n    if (this.dirty) {\n      this.dirty = false;\n      this.element.setAttribute(this.name, this._getValue() as string);\n    }\n  }\n}\n\n/**\n * A Part that controls all or part of an attribute value.\n */\nexport class AttributePart implements Part {\n  readonly committer: AttributeCommitter;\n  value: unknown = undefined;\n\n  constructor(committer: AttributeCommitter) {\n    this.committer = committer;\n  }\n\n  setValue(value: unknown): void {\n    if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n      this.value = value;\n      // If the value is a not a directive, dirty the committer so that it'll\n      // call setAttribute. If the value is a directive, it'll dirty the\n      // committer if it calls setValue().\n      if (!isDirective(value)) {\n        this.committer.dirty = true;\n      }\n    }\n  }\n\n  commit() {\n    while (isDirective(this.value)) {\n      const directive = this.value;\n      this.value = noChange;\n      directive(this);\n    }\n    if (this.value === noChange) {\n      return;\n    }\n    this.committer.commit();\n  }\n}\n\n/**\n * A Part that controls a location within a Node tree. Like a Range, NodePart\n * has start and end locations and can set and update the Nodes between those\n * locations.\n *\n * NodeParts support several value types: primitives, Nodes, TemplateResults,\n * as well as arrays and iterables of those types.\n */\nexport class NodePart implements Part {\n  readonly options: RenderOptions;\n  startNode!: Node;\n  endNode!: Node;\n  value: unknown = undefined;\n  private __pendingValue: unknown = undefined;\n\n  constructor(options: RenderOptions) {\n    this.options = options;\n  }\n\n  /**\n   * Appends this part into a container.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  appendInto(container: Node) {\n    this.startNode = container.appendChild(createMarker());\n    this.endNode = container.appendChild(createMarker());\n  }\n\n  /**\n   * Inserts this part after the `ref` node (between `ref` and `ref`'s next\n   * sibling). Both `ref` and its next sibling must be static, unchanging nodes\n   * such as those that appear in a literal section of a template.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  insertAfterNode(ref: Node) {\n    this.startNode = ref;\n    this.endNode = ref.nextSibling!;\n  }\n\n  /**\n   * Appends this part into a parent part.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  appendIntoPart(part: NodePart) {\n    part.__insert(this.startNode = createMarker());\n    part.__insert(this.endNode = createMarker());\n  }\n\n  /**\n   * Inserts this part after the `ref` part.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  insertAfterPart(ref: NodePart) {\n    ref.__insert(this.startNode = createMarker());\n    this.endNode = ref.endNode;\n    ref.endNode = this.startNode;\n  }\n\n  setValue(value: unknown): void {\n    this.__pendingValue = value;\n  }\n\n  commit() {\n    while (isDirective(this.__pendingValue)) {\n      const directive = this.__pendingValue;\n      this.__pendingValue = noChange;\n      directive(this);\n    }\n    const value = this.__pendingValue;\n    if (value === noChange) {\n      return;\n    }\n    if (isPrimitive(value)) {\n      if (value !== this.value) {\n        this.__commitText(value);\n      }\n    } else if (value instanceof TemplateResult) {\n      this.__commitTemplateResult(value);\n    } else if (value instanceof Node) {\n      this.__commitNode(value);\n    } else if (isIterable(value)) {\n      this.__commitIterable(value);\n    } else if (value === nothing) {\n      this.value = nothing;\n      this.clear();\n    } else {\n      // Fallback, will render the string representation\n      this.__commitText(value);\n    }\n  }\n\n  private __insert(node: Node) {\n    this.endNode.parentNode!.insertBefore(node, this.endNode);\n  }\n\n  private __commitNode(value: Node): void {\n    if (this.value === value) {\n      return;\n    }\n    this.clear();\n    this.__insert(value);\n    this.value = value;\n  }\n\n  private __commitText(value: unknown): void {\n    const node = this.startNode.nextSibling!;\n    value = value == null ? '' : value;\n    // If `value` isn't already a string, we explicitly convert it here in case\n    // it can't be implicitly converted - i.e. it's a symbol.\n    const valueAsString: string =\n        typeof value === 'string' ? value : String(value);\n    if (node === this.endNode.previousSibling &&\n        node.nodeType === 3 /* Node.TEXT_NODE */) {\n      // If we only have a single text node between the markers, we can just\n      // set its value, rather than replacing it.\n      // TODO(justinfagnani): Can we just check if this.value is primitive?\n      (node as Text).data = valueAsString;\n    } else {\n      this.__commitNode(document.createTextNode(valueAsString));\n    }\n    this.value = value;\n  }\n\n  private __commitTemplateResult(value: TemplateResult): void {\n    const template = this.options.templateFactory(value);\n    if (this.value instanceof TemplateInstance &&\n        this.value.template === template) {\n      this.value.update(value.values);\n    } else {\n      // Make sure we propagate the template processor from the TemplateResult\n      // so that we use its syntax extension, etc. The template factory comes\n      // from the render function options so that it can control template\n      // caching and preprocessing.\n      const instance =\n          new TemplateInstance(template, value.processor, this.options);\n      const fragment = instance._clone();\n      instance.update(value.values);\n      this.__commitNode(fragment);\n      this.value = instance;\n    }\n  }\n\n  private __commitIterable(value: Iterable<unknown>): void {\n    // For an Iterable, we create a new InstancePart per item, then set its\n    // value to the item. This is a little bit of overhead for every item in\n    // an Iterable, but it lets us recurse easily and efficiently update Arrays\n    // of TemplateResults that will be commonly returned from expressions like:\n    // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n\n    // If _value is an array, then the previous render was of an\n    // iterable and _value will contain the NodeParts from the previous\n    // render. If _value is not an array, clear this part and make a new\n    // array for NodeParts.\n    if (!Array.isArray(this.value)) {\n      this.value = [];\n      this.clear();\n    }\n\n    // Lets us keep track of how many items we stamped so we can clear leftover\n    // items from a previous render\n    const itemParts = this.value as NodePart[];\n    let partIndex = 0;\n    let itemPart: NodePart|undefined;\n\n    for (const item of value) {\n      // Try to reuse an existing part\n      itemPart = itemParts[partIndex];\n\n      // If no existing part, create a new one\n      if (itemPart === undefined) {\n        itemPart = new NodePart(this.options);\n        itemParts.push(itemPart);\n        if (partIndex === 0) {\n          itemPart.appendIntoPart(this);\n        } else {\n          itemPart.insertAfterPart(itemParts[partIndex - 1]);\n        }\n      }\n      itemPart.setValue(item);\n      itemPart.commit();\n      partIndex++;\n    }\n\n    if (partIndex < itemParts.length) {\n      // Truncate the parts array so _value reflects the current state\n      itemParts.length = partIndex;\n      this.clear(itemPart && itemPart.endNode);\n    }\n  }\n\n  clear(startNode: Node = this.startNode) {\n    removeNodes(\n        this.startNode.parentNode!, startNode.nextSibling!, this.endNode);\n  }\n}\n\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart implements Part {\n  readonly element: Element;\n  readonly name: string;\n  readonly strings: ReadonlyArray<string>;\n  value: unknown = undefined;\n  private __pendingValue: unknown = undefined;\n\n  constructor(element: Element, name: string, strings: ReadonlyArray<string>) {\n    if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n      throw new Error(\n          'Boolean attributes can only contain a single expression');\n    }\n    this.element = element;\n    this.name = name;\n    this.strings = strings;\n  }\n\n  setValue(value: unknown): void {\n    this.__pendingValue = value;\n  }\n\n  commit() {\n    while (isDirective(this.__pendingValue)) {\n      const directive = this.__pendingValue;\n      this.__pendingValue = noChange;\n      directive(this);\n    }\n    if (this.__pendingValue === noChange) {\n      return;\n    }\n    const value = !!this.__pendingValue;\n    if (this.value !== value) {\n      if (value) {\n        this.element.setAttribute(this.name, '');\n      } else {\n        this.element.removeAttribute(this.name);\n      }\n      this.value = value;\n    }\n    this.__pendingValue = noChange;\n  }\n}\n\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n  readonly single: boolean;\n\n  constructor(element: Element, name: string, strings: ReadonlyArray<string>) {\n    super(element, name, strings);\n    this.single =\n        (strings.length === 2 && strings[0] === '' && strings[1] === '');\n  }\n\n  protected _createPart(): PropertyPart {\n    return new PropertyPart(this);\n  }\n\n  protected _getValue() {\n    if (this.single) {\n      return this.parts[0].value;\n    }\n    return super._getValue();\n  }\n\n  commit(): void {\n    if (this.dirty) {\n      this.dirty = false;\n      // tslint:disable-next-line:no-any\n      (this.element as any)[this.name] = this._getValue();\n    }\n  }\n}\n\nexport class PropertyPart extends AttributePart {}\n\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the thrid\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\n\ntry {\n  const options = {\n    get capture() {\n      eventOptionsSupported = true;\n      return false;\n    }\n  };\n  // tslint:disable-next-line:no-any\n  window.addEventListener('test', options as any, options);\n  // tslint:disable-next-line:no-any\n  window.removeEventListener('test', options as any, options);\n} catch (_e) {\n}\n\n\ntype EventHandlerWithOptions =\n    EventListenerOrEventListenerObject&Partial<AddEventListenerOptions>;\nexport class EventPart implements Part {\n  readonly element: Element;\n  readonly eventName: string;\n  readonly eventContext?: EventTarget;\n  value: undefined|EventHandlerWithOptions = undefined;\n  private __options?: AddEventListenerOptions;\n  private __pendingValue: undefined|EventHandlerWithOptions = undefined;\n  private readonly __boundHandleEvent: (event: Event) => void;\n\n  constructor(element: Element, eventName: string, eventContext?: EventTarget) {\n    this.element = element;\n    this.eventName = eventName;\n    this.eventContext = eventContext;\n    this.__boundHandleEvent = (e) => this.handleEvent(e);\n  }\n\n  setValue(value: undefined|EventHandlerWithOptions): void {\n    this.__pendingValue = value;\n  }\n\n  commit() {\n    while (isDirective(this.__pendingValue)) {\n      const directive = this.__pendingValue;\n      this.__pendingValue = noChange as EventHandlerWithOptions;\n      directive(this);\n    }\n    if (this.__pendingValue === noChange) {\n      return;\n    }\n\n    const newListener = this.__pendingValue;\n    const oldListener = this.value;\n    const shouldRemoveListener = newListener == null ||\n        oldListener != null &&\n            (newListener.capture !== oldListener.capture ||\n             newListener.once !== oldListener.once ||\n             newListener.passive !== oldListener.passive);\n    const shouldAddListener =\n        newListener != null && (oldListener == null || shouldRemoveListener);\n\n    if (shouldRemoveListener) {\n      this.element.removeEventListener(\n          this.eventName, this.__boundHandleEvent, this.__options);\n    }\n    if (shouldAddListener) {\n      this.__options = getOptions(newListener);\n      this.element.addEventListener(\n          this.eventName, this.__boundHandleEvent, this.__options);\n    }\n    this.value = newListener;\n    this.__pendingValue = noChange as EventHandlerWithOptions;\n  }\n\n  handleEvent(event: Event) {\n    if (typeof this.value === 'function') {\n      this.value.call(this.eventContext || this.element, event);\n    } else {\n      (this.value as EventListenerObject).handleEvent(event);\n    }\n  }\n}\n\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn't support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = (o: AddEventListenerOptions|undefined) => o &&\n    (eventOptionsSupported ?\n         {capture: o.capture, passive: o.passive, once: o.once} :\n         o.capture as AddEventListenerOptions);\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {Part} from './part.js';\nimport {AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter} from './parts.js';\nimport {RenderOptions} from './render-options.js';\nimport {TemplateProcessor} from './template-processor.js';\n\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor implements TemplateProcessor {\n  /**\n   * Create parts for an attribute-position binding, given the event, attribute\n   * name, and string literals.\n   *\n   * @param element The element containing the binding\n   * @param name  The attribute name\n   * @param strings The string literals. There are always at least two strings,\n   *   event for fully-controlled bindings with a single expression.\n   */\n  handleAttributeExpressions(\n      element: Element, name: string, strings: string[],\n      options: RenderOptions): ReadonlyArray<Part> {\n    const prefix = name[0];\n    if (prefix === '.') {\n      const committer = new PropertyCommitter(element, name.slice(1), strings);\n      return committer.parts;\n    }\n    if (prefix === '@') {\n      return [new EventPart(element, name.slice(1), options.eventContext)];\n    }\n    if (prefix === '?') {\n      return [new BooleanAttributePart(element, name.slice(1), strings)];\n    }\n    const committer = new AttributeCommitter(element, name, strings);\n    return committer.parts;\n  }\n  /**\n   * Create parts for a text-position binding.\n   * @param templateFactory\n   */\n  handleTextExpression(options: RenderOptions) {\n    return new NodePart(options);\n  }\n}\n\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {TemplateResult} from './template-result.js';\nimport {marker, Template} from './template.js';\n\n/**\n * A function type that creates a Template from a TemplateResult.\n *\n * This is a hook into the template-creation process for rendering that\n * requires some modification of templates before they're used, like ShadyCSS,\n * which must add classes to elements and remove styles.\n *\n * Templates should be cached as aggressively as possible, so that many\n * TemplateResults produced from the same expression only do the work of\n * creating the Template the first time.\n *\n * Templates are usually cached by TemplateResult.strings and\n * TemplateResult.type, but may be cached by other keys if this function\n * modifies the template.\n *\n * Note that currently TemplateFactories must not add, remove, or reorder\n * expressions, because there is no way to describe such a modification\n * to render() so that values are interpolated to the correct place in the\n * template instances.\n */\nexport type TemplateFactory = (result: TemplateResult) => Template;\n\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result: TemplateResult) {\n  let templateCache = templateCaches.get(result.type);\n  if (templateCache === undefined) {\n    templateCache = {\n      stringsArray: new WeakMap<TemplateStringsArray, Template>(),\n      keyString: new Map<string, Template>()\n    };\n    templateCaches.set(result.type, templateCache);\n  }\n\n  let template = templateCache.stringsArray.get(result.strings);\n  if (template !== undefined) {\n    return template;\n  }\n\n  // If the TemplateStringsArray is new, generate a key from the strings\n  // This key is shared between all templates with identical content\n  const key = result.strings.join(marker);\n\n  // Check if we already have a Template for this key\n  template = templateCache.keyString.get(key);\n  if (template === undefined) {\n    // If we have not seen this key before, create a new Template\n    template = new Template(result, result.getTemplateElement());\n    // Cache the Template for this key\n    templateCache.keyString.set(key, template);\n  }\n\n  // Cache all future queries for this TemplateStringsArray\n  templateCache.stringsArray.set(result.strings, template);\n  return template;\n}\n\n/**\n * The first argument to JS template tags retain identity across multiple\n * calls to a tag for the same literal, so we can cache work done per literal\n * in a Map.\n *\n * Safari currently has a bug which occasionally breaks this behaviour, so we\n * need to cache the Template at two levels. We first cache the\n * TemplateStringsArray, and if that fails, we cache a key constructed by\n * joining the strings array.\n */\nexport type templateCache = {\n  readonly stringsArray: WeakMap<TemplateStringsArray, Template>; //\n  readonly keyString: Map<string, Template>;\n};\n\nexport const templateCaches = new Map<string, templateCache>();\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {removeNodes} from './dom.js';\nimport {NodePart} from './parts.js';\nimport {RenderOptions} from './render-options.js';\nimport {templateFactory} from './template-factory.js';\n\nexport const parts = new WeakMap<Node, NodePart>();\n\n/**\n * Renders a template result or other value to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result Any value renderable by NodePart - typically a TemplateResult\n *     created by evaluating a template tag like `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render =\n    (result: unknown,\n     container: Element|DocumentFragment,\n     options?: Partial<RenderOptions>) => {\n      let part = parts.get(container);\n      if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart({\n                               templateFactory,\n                               ...options,\n                             }));\n        part.appendInto(container);\n      }\n      part.setValue(result);\n      part.commit();\n    };\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n *\n * Main lit-html module.\n *\n * Main exports:\n *\n * -  [[html]]\n * -  [[svg]]\n * -  [[render]]\n *\n * @module lit-html\n * @preferred\n */\n\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport {defaultTemplateProcessor} from './lib/default-template-processor.js';\nimport {SVGTemplateResult, TemplateResult} from './lib/template-result.js';\n\nexport {DefaultTemplateProcessor, defaultTemplateProcessor} from './lib/default-template-processor.js';\nexport {directive, DirectiveFn, isDirective} from './lib/directive.js';\n// TODO(justinfagnani): remove line when we get NodePart moving methods\nexport {removeNodes, reparentNodes} from './lib/dom.js';\nexport {noChange, nothing, Part} from './lib/part.js';\nexport {AttributeCommitter, AttributePart, BooleanAttributePart, EventPart, isIterable, isPrimitive, NodePart, PropertyCommitter, PropertyPart} from './lib/parts.js';\nexport {RenderOptions} from './lib/render-options.js';\nexport {parts, render} from './lib/render.js';\nexport {templateCaches, templateFactory} from './lib/template-factory.js';\nexport {TemplateInstance} from './lib/template-instance.js';\nexport {TemplateProcessor} from './lib/template-processor.js';\nexport {SVGTemplateResult, TemplateResult} from './lib/template-result.js';\nexport {createMarker, isTemplatePartActive, Template} from './lib/template.js';\n\ndeclare global {\n  interface Window {\n    litHtmlVersions: string[];\n  }\n}\n\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.1.2');\n\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings: TemplateStringsArray, ...values: unknown[]) =>\n    new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings: TemplateStringsArray, ...values: unknown[]) =>\n    new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n","import { html } from \"lit-html\";\r\n\r\nexport const Nav = html`\r\n    <header>\r\n        <nav>\r\n            <a href=\"/\">Home</a>\r\n            <a href=\"/todo\">Todo</a>\r\n        </nav>\r\n    </header>\r\n`;\r\n","export interface IHash<T> { [key: string]: T; }\r\n\r\nconst s4 = (): string => {\r\n    return Math.floor((1 + Math.random()) * 0x10000)\r\n        .toString(16)\r\n        .substring(1);\r\n};\r\n\r\nexport const guidShort = (): string => {\r\n    // Prepend with letter to ensure parsed as a string and preserve\r\n    // insertion order when calling Object.keys -JDK 12/1/2016\r\n    // http://stackoverflow.com/questions/5525795/does-javascript-guarantee-object-property-order\r\n    return \"a\" + s4() + s4();\r\n};\r\n\r\nexport const forEach = (obj: any, func: (item: any, key: string) => void): void => {\r\n    if (!obj) {\r\n        return;\r\n    }\r\n    Object.entries(obj).map((i) => {\r\n        func(i[1], i[0] as string);\r\n    });\r\n};\r\n\r\nexport const toArray = <T>(obj: IHash<T> | T[], sortField?: string, reverse: boolean = false): T[] => {\r\n    let arr = [];\r\n    if (Array.isArray(obj)) {\r\n        arr = obj;\r\n    } else {\r\n        arr = Object.entries(obj || {}).map((i) => i[1]);\r\n    }\r\n    if (sortField) {\r\n        arr.sort((a, b) => {\r\n            const a1 = getProperty(a, sortField);\r\n            const b1 = getProperty(b, sortField);\r\n            if (a1 < b1) {\r\n                return reverse ? 1 : -1;\r\n            } else if (a1 > b1) {\r\n                return reverse ? -1 : 1;\r\n            }\r\n            return 0;\r\n        });\r\n    }\r\n    return arr;\r\n};\r\n\r\nexport const group = <T>(items: IHash<T> | T[], prop: (x: T) => any | string, groupVals?: string[]) => {\r\n    const groups: IHash<{key: string, items: T[]}> = {};\r\n\r\n    if (Array.isArray(groupVals)) {\r\n        groupVals.forEach((groupVal) => {\r\n            groups[groupVal] = { key: groupVal, items: [] };\r\n        });\r\n    }\r\n\r\n    toArray(items).forEach((item) => {\r\n        let val;\r\n        if (typeof prop === \"function\") {\r\n            val = prop(item);\r\n        } else {\r\n            val = getProperty(item, prop);\r\n        }\r\n\r\n        if (!groups[val]) {\r\n            groups[val] = { key: val, items: [] };\r\n        }\r\n        groups[val].items.push(item);\r\n    });\r\n\r\n    return groups;\r\n};\r\n\r\nconst getPropertyHelper = (obj: any, split: string[]): any => {\r\n    if (obj == null) {\r\n        return null;\r\n    }\r\n    if (split.length === 1) {\r\n        return obj[split[0]];\r\n    }\r\n    return getPropertyHelper(obj[split[0]], split.slice(1, split.length));\r\n};\r\n\r\nexport const getProperty = (obj: any, path: string): any => {\r\n    if (!path) {\r\n        return obj;\r\n    }\r\n    return getPropertyHelper(obj, path.split(\".\"));\r\n};\r\n\r\nconst setPropertyHelper = (obj: any, split: string[], value: any): void => {\r\n    if (obj == null) {\r\n        return;\r\n    }\r\n    if (split.length === 1) {\r\n        obj[split[0]] = value;\r\n    } else {\r\n        setPropertyHelper(obj[split[0]], split.slice(1, split.length), value);\r\n    }\r\n};\r\n\r\nexport const setProperty = (obj: any, path: string, value: any) => {\r\n    return setPropertyHelper(obj, path.split(\".\"), value);\r\n};\r\n\r\nexport const round = (value: number, decimals: number = 0): number => {\r\n    // console.log(\"round\", value, value.toFixed(precision), parseFloat(value.toFixed(precision)));\r\n    // return parseFloat(value.toFixed(precision));\r\n    return Number(Math.round((value + \"e\" + decimals) as any) + \"e-\" + decimals);\r\n};\r\n\r\nexport const randomInt = (min: number, max: number): number => {\r\n    // inclusive of min and max\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n};\r\n\r\nexport const formatCurrency = (value: number | string, precision: number = 2, emptyString: string = \"\"): string => {\r\n    if (value === \"\") {\r\n        // console.log(\"val is empty string\", value, emptyString);\r\n        if (emptyString != null) {\r\n            return emptyString;\r\n        } else {\r\n            value = 0;\r\n        }\r\n    }\r\n    const valueAsNumber: number = (typeof value === \"string\") ? parseInt(value, 10) : value;\r\n    if (typeof valueAsNumber !== \"number\" || isNaN(valueAsNumber)) {\r\n        return emptyString;\r\n    }\r\n    return numberWithCommas(valueAsNumber.toFixed(precision));\r\n};\r\n\r\nexport const numberWithCommas = (x: number | string): string => {\r\n    if (typeof x === \"number\") {\r\n        x = x.toString();\r\n    }\r\n    if (typeof x !== \"string\") {\r\n        return \"\";\r\n    }\r\n    const split = x.split(\".\");\r\n    split[0] = split[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n    return split.join(\".\");\r\n};\r\n\r\nexport const deepCopy = <T>(obj: T) => {\r\n    return JSON.parse(JSON.stringify(obj)) as T;\r\n};\r\n\r\nexport const getTotalFields = <T>(item: T, fields: Array<keyof T>): number => {\r\n    const total = fields.reduce((acc, curr) => ((item[curr] as any) as number) + acc, 0);\r\n    return round(total, 2);\r\n};\r\n\r\nexport const getTotal = <T>(items: T[] | IHash<T>, fields: Array<keyof T>): number => {\r\n    const total = toArray(items).reduce((acc, curr) => (getTotalFields(curr, fields)) + acc, 0);\r\n    return round(total, 2);\r\n};\r\n\r\nexport const BuildTypescriptModel = (obj: any) => {\r\n    let str = \"\";\r\n    Object.entries(obj).sort((a: any, b: any) => a[0] > b[0] ? 1 : 0).forEach((entry) => {\r\n        str += `${entry[0]}: ${typeof entry[1] === \"number\" ? \"number\" : \"string\"};\\n`\r\n    });\r\n    return str;\r\n};","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {DirectiveFn} from '../lib/directive.js';\nimport {createMarker, directive, NodePart, Part, removeNodes, reparentNodes} from '../lit-html.js';\n\nexport type KeyFn<T> = (item: T, index: number) => unknown;\nexport type ItemTemplate<T> = (item: T, index: number) => unknown;\n\n// Helper functions for manipulating parts\n// TODO(kschaaf): Refactor into Part API?\nconst createAndInsertPart =\n    (containerPart: NodePart, beforePart?: NodePart): NodePart => {\n      const container = containerPart.startNode.parentNode as Node;\n      const beforeNode = beforePart === undefined ? containerPart.endNode :\n                                                    beforePart.startNode;\n      const startNode = container.insertBefore(createMarker(), beforeNode);\n      container.insertBefore(createMarker(), beforeNode);\n      const newPart = new NodePart(containerPart.options);\n      newPart.insertAfterNode(startNode);\n      return newPart;\n    };\n\nconst updatePart = (part: NodePart, value: unknown) => {\n  part.setValue(value);\n  part.commit();\n  return part;\n};\n\nconst insertPartBefore =\n    (containerPart: NodePart, part: NodePart, ref?: NodePart) => {\n      const container = containerPart.startNode.parentNode as Node;\n      const beforeNode = ref ? ref.startNode : containerPart.endNode;\n      const endNode = part.endNode.nextSibling;\n      if (endNode !== beforeNode) {\n        reparentNodes(container, part.startNode, endNode, beforeNode);\n      }\n    };\n\nconst removePart = (part: NodePart) => {\n  removeNodes(\n      part.startNode.parentNode!, part.startNode, part.endNode.nextSibling);\n};\n\n// Helper for generating a map of array item to its index over a subset\n// of an array (used to lazily generate `newKeyToIndexMap` and\n// `oldKeyToIndexMap`)\nconst generateMap = (list: unknown[], start: number, end: number) => {\n  const map = new Map();\n  for (let i = start; i <= end; i++) {\n    map.set(list[i], i);\n  }\n  return map;\n};\n\n// Stores previous ordered list of parts and map of key to index\nconst partListCache = new WeakMap<NodePart, (NodePart | null)[]>();\nconst keyListCache = new WeakMap<NodePart, unknown[]>();\n\n/**\n * A directive that repeats a series of values (usually `TemplateResults`)\n * generated from an iterable, and updates those items efficiently when the\n * iterable changes based on user-provided `keys` associated with each item.\n *\n * Note that if a `keyFn` is provided, strict key-to-DOM mapping is maintained,\n * meaning previous DOM for a given key is moved into the new position if\n * needed, and DOM will never be reused with values for different keys (new DOM\n * will always be created for new keys). This is generally the most efficient\n * way to use `repeat` since it performs minimum unnecessary work for insertions\n * amd removals.\n *\n * IMPORTANT: If providing a `keyFn`, keys *must* be unique for all items in a\n * given call to `repeat`. The behavior when two or more items have the same key\n * is undefined.\n *\n * If no `keyFn` is provided, this directive will perform similar to mapping\n * items to values, and DOM will be reused against potentially different items.\n */\nexport const repeat =\n    directive(\n        <T>(items: Iterable<T>,\n            keyFnOrTemplate: KeyFn<T>|ItemTemplate<T>,\n            template?: ItemTemplate<T>):\n            DirectiveFn => {\n              let keyFn: KeyFn<T>;\n              if (template === undefined) {\n                template = keyFnOrTemplate;\n              } else if (keyFnOrTemplate !== undefined) {\n                keyFn = keyFnOrTemplate as KeyFn<T>;\n              }\n\n              return (containerPart: Part): void => {\n                if (!(containerPart instanceof NodePart)) {\n                  throw new Error('repeat can only be used in text bindings');\n                }\n                // Old part & key lists are retrieved from the last update\n                // (associated with the part for this instance of the directive)\n                const oldParts = partListCache.get(containerPart) || [];\n                const oldKeys = keyListCache.get(containerPart) || [];\n\n                // New part list will be built up as we go (either reused from\n                // old parts or created for new keys in this update). This is\n                // saved in the above cache at the end of the update.\n                const newParts: NodePart[] = [];\n\n                // New value list is eagerly generated from items along with a\n                // parallel array indicating its key.\n                const newValues: unknown[] = [];\n                const newKeys: unknown[] = [];\n                let index = 0;\n                for (const item of items) {\n                  newKeys[index] = keyFn ? keyFn(item, index) : index;\n                  newValues[index] = template !(item, index);\n                  index++;\n                }\n\n                // Maps from key to index for current and previous update; these\n                // are generated lazily only when needed as a performance\n                // optimization, since they are only required for multiple\n                // non-contiguous changes in the list, which are less common.\n                let newKeyToIndexMap!: Map<unknown, number>;\n                let oldKeyToIndexMap!: Map<unknown, number>;\n\n                // Head and tail pointers to old parts and new values\n                let oldHead = 0;\n                let oldTail = oldParts.length - 1;\n                let newHead = 0;\n                let newTail = newValues.length - 1;\n\n                // Overview of O(n) reconciliation algorithm (general approach\n                // based on ideas found in ivi, vue, snabbdom, etc.):\n                //\n                // * We start with the list of old parts and new values (and\n                //   arrays of their respective keys), head/tail pointers into\n                //   each, and we build up the new list of parts by updating\n                //   (and when needed, moving) old parts or creating new ones.\n                //   The initial scenario might look like this (for brevity of\n                //   the diagrams, the numbers in the array reflect keys\n                //   associated with the old parts or new values, although keys\n                //   and parts/values are actually stored in parallel arrays\n                //   indexed using the same head/tail pointers):\n                //\n                //      oldHead v                 v oldTail\n                //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n                //   newParts: [ ,  ,  ,  ,  ,  ,  ]\n                //   newKeys:  [0, 2, 1, 4, 3, 7, 6] <- reflects the user's new\n                //                                      item order\n                //      newHead ^                 ^ newTail\n                //\n                // * Iterate old & new lists from both sides, updating,\n                //   swapping, or removing parts at the head/tail locations\n                //   until neither head nor tail can move.\n                //\n                // * Example below: keys at head pointers match, so update old\n                //   part 0 in-place (no need to move it) and record part 0 in\n                //   the `newParts` list. The last thing we do is advance the\n                //   `oldHead` and `newHead` pointers (will be reflected in the\n                //   next diagram).\n                //\n                //      oldHead v                 v oldTail\n                //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n                //   newParts: [0,  ,  ,  ,  ,  ,  ] <- heads matched: update 0\n                //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance both oldHead\n                //                                      & newHead\n                //      newHead ^                 ^ newTail\n                //\n                // * Example below: head pointers don't match, but tail\n                //   pointers do, so update part 6 in place (no need to move\n                //   it), and record part 6 in the `newParts` list. Last,\n                //   advance the `oldTail` and `oldHead` pointers.\n                //\n                //         oldHead v              v oldTail\n                //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n                //   newParts: [0,  ,  ,  ,  ,  , 6] <- tails matched: update 6\n                //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance both oldTail\n                //                                      & newTail\n                //         newHead ^              ^ newTail\n                //\n                // * If neither head nor tail match; next check if one of the\n                //   old head/tail items was removed. We first need to generate\n                //   the reverse map of new keys to index (`newKeyToIndexMap`),\n                //   which is done once lazily as a performance optimization,\n                //   since we only hit this case if multiple non-contiguous\n                //   changes were made. Note that for contiguous removal\n                //   anywhere in the list, the head and tails would advance\n                //   from either end and pass each other before we get to this\n                //   case and removals would be handled in the final while loop\n                //   without needing to generate the map.\n                //\n                // * Example below: The key at `oldTail` was removed (no longer\n                //   in the `newKeyToIndexMap`), so remove that part from the\n                //   DOM and advance just the `oldTail` pointer.\n                //\n                //         oldHead v           v oldTail\n                //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n                //   newParts: [0,  ,  ,  ,  ,  , 6] <- 5 not in new map: remove\n                //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    5 and advance oldTail\n                //         newHead ^           ^ newTail\n                //\n                // * Once head and tail cannot move, any mismatches are due to\n                //   either new or moved items; if a new key is in the previous\n                //   \"old key to old index\" map, move the old part to the new\n                //   location, otherwise create and insert a new part. Note\n                //   that when moving an old part we null its position in the\n                //   oldParts array if it lies between the head and tail so we\n                //   know to skip it when the pointers get there.\n                //\n                // * Example below: neither head nor tail match, and neither\n                //   were removed; so find the `newHead` key in the\n                //   `oldKeyToIndexMap`, and move that old part's DOM into the\n                //   next head position (before `oldParts[oldHead]`). Last,\n                //   null the part in the `oldPart` array since it was\n                //   somewhere in the remaining oldParts still to be scanned\n                //   (between the head and tail pointers) so that we know to\n                //   skip that old part on future iterations.\n                //\n                //         oldHead v        v oldTail\n                //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n                //   newParts: [0, 2,  ,  ,  ,  , 6] <- stuck: update & move 2\n                //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    into place and advance\n                //                                      newHead\n                //         newHead ^           ^ newTail\n                //\n                // * Note that for moves/insertions like the one above, a part\n                //   inserted at the head pointer is inserted before the\n                //   current `oldParts[oldHead]`, and a part inserted at the\n                //   tail pointer is inserted before `newParts[newTail+1]`. The\n                //   seeming asymmetry lies in the fact that new parts are\n                //   moved into place outside in, so to the right of the head\n                //   pointer are old parts, and to the right of the tail\n                //   pointer are new parts.\n                //\n                // * We always restart back from the top of the algorithm,\n                //   allowing matching and simple updates in place to\n                //   continue...\n                //\n                // * Example below: the head pointers once again match, so\n                //   simply update part 1 and record it in the `newParts`\n                //   array.  Last, advance both head pointers.\n                //\n                //         oldHead v        v oldTail\n                //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n                //   newParts: [0, 2, 1,  ,  ,  , 6] <- heads matched: update 1\n                //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance both oldHead\n                //                                      & newHead\n                //            newHead ^        ^ newTail\n                //\n                // * As mentioned above, items that were moved as a result of\n                //   being stuck (the final else clause in the code below) are\n                //   marked with null, so we always advance old pointers over\n                //   these so we're comparing the next actual old value on\n                //   either end.\n                //\n                // * Example below: `oldHead` is null (already placed in\n                //   newParts), so advance `oldHead`.\n                //\n                //            oldHead v     v oldTail\n                //   oldKeys:  [0, 1, -, 3, 4, 5, 6] <- old head already used:\n                //   newParts: [0, 2, 1,  ,  ,  , 6]    advance oldHead\n                //   newKeys:  [0, 2, 1, 4, 3, 7, 6]\n                //               newHead ^     ^ newTail\n                //\n                // * Note it's not critical to mark old parts as null when they\n                //   are moved from head to tail or tail to head, since they\n                //   will be outside the pointer range and never visited again.\n                //\n                // * Example below: Here the old tail key matches the new head\n                //   key, so the part at the `oldTail` position and move its\n                //   DOM to the new head position (before `oldParts[oldHead]`).\n                //   Last, advance `oldTail` and `newHead` pointers.\n                //\n                //               oldHead v  v oldTail\n                //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n                //   newParts: [0, 2, 1, 4,  ,  , 6] <- old tail matches new\n                //   newKeys:  [0, 2, 1, 4, 3, 7, 6]   head: update & move 4,\n                //                                     advance oldTail & newHead\n                //               newHead ^     ^ newTail\n                //\n                // * Example below: Old and new head keys match, so update the\n                //   old head part in place, and advance the `oldHead` and\n                //   `newHead` pointers.\n                //\n                //               oldHead v oldTail\n                //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n                //   newParts: [0, 2, 1, 4, 3,   ,6] <- heads match: update 3\n                //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance oldHead &\n                //                                      newHead\n                //                  newHead ^  ^ newTail\n                //\n                // * Once the new or old pointers move past each other then all\n                //   we have left is additions (if old list exhausted) or\n                //   removals (if new list exhausted). Those are handled in the\n                //   final while loops at the end.\n                //\n                // * Example below: `oldHead` exceeded `oldTail`, so we're done\n                //   with the main loop.  Create the remaining part and insert\n                //   it at the new head position, and the update is complete.\n                //\n                //                   (oldHead > oldTail)\n                //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n                //   newParts: [0, 2, 1, 4, 3, 7 ,6] <- create and insert 7\n                //   newKeys:  [0, 2, 1, 4, 3, 7, 6]\n                //                     newHead ^ newTail\n                //\n                // * Note that the order of the if/else clauses is not\n                //   important to the algorithm, as long as the null checks\n                //   come first (to ensure we're always working on valid old\n                //   parts) and that the final else clause comes last (since\n                //   that's where the expensive moves occur). The order of\n                //   remaining clauses is is just a simple guess at which cases\n                //   will be most common.\n                //\n                // * TODO(kschaaf) Note, we could calculate the longest\n                //   increasing subsequence (LIS) of old items in new position,\n                //   and only move those not in the LIS set. However that costs\n                //   O(nlogn) time and adds a bit more code, and only helps\n                //   make rare types of mutations require fewer moves. The\n                //   above handles removes, adds, reversal, swaps, and single\n                //   moves of contiguous items in linear time, in the minimum\n                //   number of moves. As the number of multiple moves where LIS\n                //   might help approaches a random shuffle, the LIS\n                //   optimization becomes less helpful, so it seems not worth\n                //   the code at this point. Could reconsider if a compelling\n                //   case arises.\n\n                while (oldHead <= oldTail && newHead <= newTail) {\n                  if (oldParts[oldHead] === null) {\n                    // `null` means old part at head has already been used\n                    // below; skip\n                    oldHead++;\n                  } else if (oldParts[oldTail] === null) {\n                    // `null` means old part at tail has already been used\n                    // below; skip\n                    oldTail--;\n                  } else if (oldKeys[oldHead] === newKeys[newHead]) {\n                    // Old head matches new head; update in place\n                    newParts[newHead] =\n                        updatePart(oldParts[oldHead]!, newValues[newHead]);\n                    oldHead++;\n                    newHead++;\n                  } else if (oldKeys[oldTail] === newKeys[newTail]) {\n                    // Old tail matches new tail; update in place\n                    newParts[newTail] =\n                        updatePart(oldParts[oldTail]!, newValues[newTail]);\n                    oldTail--;\n                    newTail--;\n                  } else if (oldKeys[oldHead] === newKeys[newTail]) {\n                    // Old head matches new tail; update and move to new tail\n                    newParts[newTail] =\n                        updatePart(oldParts[oldHead]!, newValues[newTail]);\n                    insertPartBefore(\n                        containerPart,\n                        oldParts[oldHead]!,\n                        newParts[newTail + 1]);\n                    oldHead++;\n                    newTail--;\n                  } else if (oldKeys[oldTail] === newKeys[newHead]) {\n                    // Old tail matches new head; update and move to new head\n                    newParts[newHead] =\n                        updatePart(oldParts[oldTail]!, newValues[newHead]);\n                    insertPartBefore(\n                        containerPart, oldParts[oldTail]!, oldParts[oldHead]!);\n                    oldTail--;\n                    newHead++;\n                  } else {\n                    if (newKeyToIndexMap === undefined) {\n                      // Lazily generate key-to-index maps, used for removals &\n                      // moves below\n                      newKeyToIndexMap = generateMap(newKeys, newHead, newTail);\n                      oldKeyToIndexMap = generateMap(oldKeys, oldHead, oldTail);\n                    }\n                    if (!newKeyToIndexMap.has(oldKeys[oldHead])) {\n                      // Old head is no longer in new list; remove\n                      removePart(oldParts[oldHead]!);\n                      oldHead++;\n                    } else if (!newKeyToIndexMap.has(oldKeys[oldTail])) {\n                      // Old tail is no longer in new list; remove\n                      removePart(oldParts[oldTail]!);\n                      oldTail--;\n                    } else {\n                      // Any mismatches at this point are due to additions or\n                      // moves; see if we have an old part we can reuse and move\n                      // into place\n                      const oldIndex = oldKeyToIndexMap.get(newKeys[newHead]);\n                      const oldPart =\n                          oldIndex !== undefined ? oldParts[oldIndex] : null;\n                      if (oldPart === null) {\n                        // No old part for this value; create a new one and\n                        // insert it\n                        const newPart = createAndInsertPart(\n                            containerPart, oldParts[oldHead]!);\n                        updatePart(newPart, newValues[newHead]);\n                        newParts[newHead] = newPart;\n                      } else {\n                        // Reuse old part\n                        newParts[newHead] =\n                            updatePart(oldPart, newValues[newHead]);\n                        insertPartBefore(\n                            containerPart, oldPart, oldParts[oldHead]!);\n                        // This marks the old part as having been used, so that\n                        // it will be skipped in the first two checks above\n                        oldParts[oldIndex as number] = null;\n                      }\n                      newHead++;\n                    }\n                  }\n                }\n                // Add parts for any remaining new values\n                while (newHead <= newTail) {\n                  // For all remaining additions, we insert before last new\n                  // tail, since old pointers are no longer valid\n                  const newPart =\n                      createAndInsertPart(containerPart, newParts[newTail + 1]);\n                  updatePart(newPart, newValues[newHead]);\n                  newParts[newHead++] = newPart;\n                }\n                // Remove any remaining unused old parts\n                while (oldHead <= oldTail) {\n                  const oldPart = oldParts[oldHead++];\n                  if (oldPart !== null) {\n                    removePart(oldPart);\n                  }\n                }\n                // Save order of new parts for next round\n                partListCache.set(containerPart, newParts);\n                keyListCache.set(containerPart, newKeys);\n              };\n            }) as\n    <T>(items: Iterable<T>,\n        keyFnOrTemplate: KeyFn<T>|ItemTemplate<T>,\n        template?: ItemTemplate<T>) => DirectiveFn;\n","import { html, TemplateResult } from \"lit-html\";\r\nimport moment from \"moment\";\r\nimport { formatCurrency, getProperty, guidShort, round } from \"../utils\";\r\n\r\nexport { html, render, TemplateResult } from \"lit-html\";\r\nexport { repeat } from \"lit-html/directives/repeat\";\r\nexport { moment };\r\n\r\n// bind and call so the caller's source and line number shows up in devtools -JDK 2020-01-04\r\n// tslint:disable-next-line: no-console\r\nexport const log = Function.prototype.bind.call(console.log, console, \"%c App:\", \"color: green\");\r\n// tslint:disable-next-line: no-console\r\nexport const debug = Function.prototype.bind.call(console.log, console, \"%c DEBUG:\", \"color: blue\");\r\n\r\nexport const autoReload = (socket: SocketIOClient.Socket = io()): void => {\r\n    socket.on(\"reload\", () => {\r\n        window.location.reload();\r\n    });\r\n    log(\"autoReload connected.\");\r\n};\r\n\r\nexport const Loading = () => html`\r\n    <h3>Loading...</h3>\r\n`;\r\n\r\nexport const Error = (err: Error) => {\r\n    return html`\r\n        <h3>Error:</h3>\r\n        <p>${err.message}</p>\r\n        <pre>${JSON.stringify(err.stack, null, 2)}</pre>\r\n    `;\r\n};\r\n\r\ninterface IFormatter {\r\n    inputType: \"text\" | \"date\" | \"number\";\r\n    preferredInputStyle?: string;\r\n    parse(str: string): any;\r\n    toString(value: any): string;\r\n}\r\n\r\nexport const StringFormatter: IFormatter = {\r\n    inputType: \"text\",\r\n    parse: (str: string) => str,\r\n    preferredInputStyle: \"width: 100%\",\r\n    toString: (value: string) => value,\r\n};\r\n\r\nexport const CurrencyFormatter: IFormatter = {\r\n    inputType: \"text\", // Allow commas and dollar sign\r\n    parse: (str: string) => round(parseFloat(str.replace(\"$\", \"\").replace(\",\", \"\")), 2),\r\n    preferredInputStyle: \"width: 8em; text-align: right;\",\r\n    toString: (value: string) => formatCurrency(value),\r\n};\r\n\r\nexport const IntegerFormatter: IFormatter = {\r\n    inputType: \"text\", // Allow commas\r\n    parse: (str: string) => round(parseFloat(str.replace(\",\", \"\")), 0),\r\n    preferredInputStyle: \"width: 8em; text-align: right;\",\r\n    toString: (value: string) => value.toString(),\r\n};\r\n\r\nexport const DateFormatter: IFormatter = {\r\n    inputType: \"date\",\r\n    parse: (str: string) => { log(\"str\", str); return moment(str).format(\"YYYY-MM-DD\"); },\r\n    preferredInputStyle: \"width: 8em;\",\r\n    toString: (value: string) => moment(value).format(\"YYYY-MM-DD\"),\r\n};\r\n\r\nexport const TwoWayInput = <T>(model: T,\r\n                               prop: keyof T,\r\n                               formatter: IFormatter = StringFormatter,\r\n                               onChanged?: (newValue: any) => void,\r\n                               isTextArea: boolean = false) => {\r\n    let timeout: NodeJS.Timeout;\r\n\r\n    const commit = (e: InputEvent) => {\r\n        if (timeout) { clearTimeout(timeout); }\r\n\r\n        log(\"e.target\", e.target);\r\n        const newValue = (e.target as HTMLInputElement).value as any;\r\n        /*\r\n        const newValue = isTextArea ? (e.target as HTMLTextAreaElement).innerHTML as any\r\n                                    : (e.target as HTMLInputElement).value as any;\r\n        */\r\n        model[prop] = formatter.parse(newValue);\r\n\r\n        if (onChanged) { onChanged(newValue); }\r\n    };\r\n\r\n    const onChange = (e: InputEvent) => {\r\n        // Commit immediately\r\n        commit(e);\r\n    };\r\n\r\n    const onInput = (e: InputEvent) => {\r\n        if (timeout) { clearTimeout(timeout); }\r\n        timeout = setTimeout(() => {\r\n            commit(e);\r\n        }, 1000);\r\n    };\r\n\r\n    let value = getProperty(model, prop as string);\r\n    value = formatter.toString(value);\r\n\r\n    const style = formatter.preferredInputStyle || \"\";\r\n    if (isTextArea) {\r\n        return html`\r\n            <textarea style=${style} @input=${onInput} @change=${onChange}>${value}</textarea>\r\n        `;\r\n    } else {\r\n        return html`\r\n            <input type=${formatter.inputType} style=${style} value=${value} @input=${onInput} @change=${onChange} />\r\n        `;\r\n    }\r\n};\r\n\r\nexport const Label = (label: string, content: TemplateResult | string) => {\r\n    return html`\r\n        <div class=\"row\">\r\n            <label class=\"row-nofill w5\">\r\n                ${label}\r\n            </label>\r\n            <div class=\"row-nofill w10\">\r\n                ${content}\r\n            </div>\r\n        </div>\r\n    `;\r\n};\r\n\r\nexport const normalizedDate = (date?: string | moment.Moment) => moment(date).format(\"YYYY-MM-DD\");\r\nexport const normalizedDateTime = (date?: string | moment.Moment) => moment(date).toISOString();\r\nexport const formattedDate = (date?: string | moment.Moment) => moment(date).format(\"MM-DD-YYYY\");\r\nexport const formattedDateTime = (date?: string | moment.Moment) => moment(date).format(\"MM-DD-YYYY h:mma\");\r\n\r\nexport const elementRef = <T extends HTMLElement>() => {\r\n    const id = guidShort();\r\n    return {\r\n        get: () => document.getElementById(id) as T,\r\n        id,\r\n    };\r\n};\r\n\r\nexport class DateRange {\r\n    public startDate: moment.Moment;\r\n    public endDate: moment.Moment;\r\n    constructor() {\r\n        this.endDate = moment();\r\n        this.startDate = moment(this.endDate).add(-12, \"months\");\r\n    }\r\n    public render() {\r\n        const startChanged = (e: Event) => this.startDate = moment((e.target as HTMLInputElement).value);\r\n        const endChanged = (e: Event) => {\r\n            this.endDate = moment((e.target as HTMLInputElement).value);\r\n        };\r\n        return html`\r\n            <div class=\"row\">\r\n                <span class=\"w3\">Start:</span>\r\n                <input class=\"w4\" value=${this.startDate.format(\"YYYY-MM-DD\")} @change=${startChanged} type=\"date\" />\r\n            </div>\r\n            <div class=\"row\">\r\n                <span class=\"w3\">End:</span>\r\n                <input class=\"w4\" value=${this.endDate.format(\"YYYY-MM-DD\")} @change=${endChanged} type=\"date\" />\r\n            </div>\r\n        `;\r\n    }\r\n}\r\n\r\n/*\r\nexport interface IInputOptions {\r\n    label?: string;\r\n    type?: \"number\" | \"text\" | \"date\";\r\n    step?: number;\r\n    onChange?: (newValue: any) => void;\r\n    isCurrency?: boolean;\r\n}\r\n\r\nexport const TwoWayInput = <T>(model: T, prop: keyof T, options: IInputOptions = {}) => {\r\n    let type = options.type || \"text\";\r\n\r\n    let timeout: NodeJS.Timeout;\r\n\r\n    const commit = (e: InputEvent) => {\r\n        if (timeout) { clearTimeout(timeout); }\r\n\r\n        let newValue = (e.target as HTMLInputElement).value as any;\r\n        if (options.type === \"number\") { newValue = parseFloat(newValue); }\r\n        if (options.isCurrency) { newValue = round(newValue); }\r\n        model[prop] = newValue;\r\n\r\n        if (options.onChange) { options.onChange(newValue); }\r\n    };\r\n\r\n    const onChange = (e: InputEvent) => {\r\n        // Commit immediately\r\n        commit(e);\r\n    };\r\n\r\n    const onInput = (e: InputEvent) => {\r\n        if (timeout) { clearTimeout(timeout); }\r\n        timeout = setTimeout(() => {\r\n            commit(e);\r\n        }, 1000);\r\n    };\r\n\r\n    let value = getProperty(model, prop as string);\r\n    if (options.type === \"date\") {\r\n        value = moment(value).format(\"YYYY-MM-DD\");\r\n    }\r\n    if (options.isCurrency) {\r\n        type = \"number\";\r\n        options.step = 0.01;\r\n        value = formatCurrency(value);\r\n    }\r\n\r\n    return html`\r\n        <input value=${value} @input=${onInput} @change=${onChange}\r\n        type=${type} step=${options.step || 0.01} />\r\n    `;\r\n};\r\n\r\n*/\r\n\r\n/*\r\nexport class InputGeneric<T> {\r\n    private model: T;\r\n    private prop: keyof T;\r\n    private options: IInputOptions;\r\n\r\n    constructor(model: T, prop: keyof T, options: IInputOptions = {}) {\r\n        this.model = model;\r\n        this.prop = prop;\r\n        this.options = options;\r\n    }\r\n\r\n    public getModelValue(): string {\r\n        return getProperty(this.model, this.prop as string).toString();\r\n    }\r\n\r\n    public parseValue(value: any): { success: boolean; value: any} {\r\n        return { success: true, value };\r\n    }\r\n\r\n    public setModelValue(newValue: any) {\r\n        const result = this.parseValue(newValue);\r\n        if (result.success) {\r\n            this.model[this.prop] = result.value;\r\n            log(\"onInput\", newValue);\r\n            if (this.options.onChange) { this.options.onChange(newValue); }\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        return html`\r\n            <input value=${this.getModelValue()} @input=${this.onInput.bind(this)} />\r\n        `;\r\n    }\r\n\r\n    private onInput(e: InputEvent) {\r\n        const newValue = (e.target as HTMLInputElement).value as any;\r\n        this.setModelValue(newValue);\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line: max-classes-per-file\r\nexport class InputCurrency<T> extends InputGeneric<T> {\r\n    public getModelValue(): string {\r\n        return \"Currency\";\r\n    }\r\n}\r\n\r\nexport const InputCurrency2 = <T>(model: T, prop: keyof T, options: IInputOptions = {}) => {\r\n    let timeout: NodeJS.Timeout;\r\n    const commit = (e: InputEvent) => {\r\n        if (timeout) { clearTimeout(timeout); }\r\n\r\n        let newValue = (e.target as HTMLInputElement).value as any;\r\n        newValue = parseFloat(newValue);\r\n        newValue = round(newValue);\r\n        model[prop] = newValue;\r\n\r\n        if (options.onChange) { options.onChange(newValue); }\r\n    };\r\n\r\n    const onChange = (e: InputEvent) => commit(e);\r\n    const onInput = (e: InputEvent) => {\r\n        if (timeout) { clearTimeout(timeout); }\r\n        timeout = setTimeout(() => {\r\n            commit(e);\r\n        }, 1000);\r\n    };\r\n\r\n    const value = formatCurrency(getProperty(model, prop as string));\r\n    const type = \"text\";\r\n\r\n    return html`\r\n        <input value=${value} @input=${onInput} @change=${onChange}\r\n        type=${type} />\r\n    `;\r\n};\r\n*/\r\n","import { guidShort, IHash } from \"../utils\";\r\n// import { handleError, handleJsonResponse } from \"./api-utils\";\r\nimport { log } from \"./utils-browser\";\r\n\r\nexport const handleError = (response: Response, additionalInfo?: string): void => {\r\n    if (!response.ok) {\r\n        const msg = `${response.status} ${response.statusText}${additionalInfo ? \": \" + additionalInfo : \"\"}`;\r\n        log(\"Error:\", msg);\r\n        throw Error(msg);\r\n    }\r\n};\r\n\r\nexport const handleJsonResponse = (response: Response, additionalInfo?: string) => {\r\n    handleError(response, additionalInfo);\r\n    return response.json();\r\n};\r\n\r\nexport const sendJson = (url: string, data: any, method: \"PUT\" | \"POST\" = \"POST\", additionalInfo?: string) => {\r\n    return fetch(url, {\r\n        body: JSON.stringify(data),\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n        },\r\n        method,\r\n    }).then((response) => handleJsonResponse(response, additionalInfo));\r\n};\r\n\r\nexport const createApi = <T extends { id: string }>(endpointUrl: string) => {\r\n    const getAll = (): Promise<IHash<T>> => {\r\n        return fetch(endpointUrl).then(handleJsonResponse);\r\n    };\r\n\r\n    const getItem = (id: string): Promise<T> => {\r\n        return fetch(`${endpointUrl}/${id}`).then((response) => handleJsonResponse(response, `id=${id}`));\r\n    };\r\n\r\n    const putItem = (item: T): Promise<T> => {\r\n        item.id = item.id || guidShort();\r\n        return fetch(`${endpointUrl}/${item.id}`, {\r\n            body: JSON.stringify(item),\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            method: \"PUT\",\r\n        }).then((response) => handleJsonResponse(response, `id=${item.id}`));\r\n    };\r\n\r\n    const deleteItem = (item: T): Promise<void> => {\r\n        return fetch(`${endpointUrl}/${item.id}`, {\r\n            method: \"DELETE\",\r\n        }).then((response) => handleError(response, `id=${item.id}`));\r\n    };\r\n\r\n    return {\r\n        deleteItem,\r\n        getAll,\r\n        getItem,\r\n        putItem,\r\n    };\r\n};\r\n","import { IHash } from \"../../../utils\";\r\nimport { createApi, handleJsonResponse, sendJson } from \"../../api-keyval-client\";\r\nimport * as models from \"../models\";\r\n\r\nconst todosApi = createApi<models.ITodo>(\"./api/todo\");\r\n\r\nexport const Actions = {\r\n    Todos: {\r\n        ...todosApi,\r\n    },\r\n};\r\n","import { guidShort, toArray } from \"../../../utils\";\r\nimport { Nav } from \"../../home/client/nav\";\r\nimport { autoReload, elementRef, html, log, normalizedDate, render, repeat  } from \"../../utils-browser\";\r\nimport { ITodo } from \"../models\";\r\nimport { Actions } from \"./store\";\r\n\r\nexport const TodosList = (todos: ITodo[]) => {\r\n    const deleteTodo = (todo: ITodo) => {\r\n        Actions.Todos.deleteItem(todo);\r\n    };\r\n    return html`\r\n        ${repeat(todos, (x) => x.id, (x) => html`\r\n            <div class=\"row\">\r\n                <div class=\"w4\">${normalizedDate(x.createdAt)}</div>\r\n                <div class=\"row-fill\">${x.text}</div>\r\n                <button class=\"w2\" @click=${() => deleteTodo(x)}>X</button>\r\n            </div>\r\n        `)}\r\n    `;\r\n};\r\n\r\nexport const Todos = () => {\r\n    const NewTodo = () => {\r\n        const inputRef = elementRef<HTMLInputElement>();\r\n        const addTodo = () => {\r\n            const text = inputRef.get().value;\r\n            Actions.Todos.putItem({\r\n                createdAt: new Date().toISOString(),\r\n                id: guidShort(),\r\n                text,\r\n            }).then((added) => {\r\n                log(\"Added Todo:\", added);\r\n                refresh();\r\n            });\r\n        };\r\n\r\n        return html`\r\n            <div class=\"row\">\r\n                <input class=\"w10\" id=${inputRef.id} />\r\n                <button class=\"w3\" @click=${addTodo}>Add</button>\r\n            </div>\r\n        `;\r\n    };\r\n\r\n    const listRef = elementRef();\r\n\r\n    const refresh = () => {\r\n        Actions.Todos.getAll().then((todos) => {\r\n            const arr = toArray(todos);\r\n            render(TodosList(arr), listRef.get());\r\n        });\r\n    };\r\n    refresh();\r\n\r\n    return html`\r\n        ${NewTodo()}\r\n        <div id=${listRef.id}>\r\n        </div>\r\n    `;\r\n};","import { Nav } from \"../../home/client/nav\";\r\nimport { autoReload, elementRef, html, log, render  } from \"../../utils-browser\";\r\nimport { Actions } from \"./store\";\r\nimport { Todos } from \"./todo\";\r\n\r\nconst routeBase = \"/todo\";\r\nconst nsp = io(routeBase);\r\nautoReload(nsp);\r\n\r\nconst mainDiv = document.getElementById(\"mainDiv\") as HTMLElement;\r\n\r\nconst Main = () => html`\r\n    ${Nav}\r\n    <h1>Todo</h1>\r\n    ${Todos()}\r\n`;\r\n\r\npage.base(routeBase);\r\npage(\"/\", () => render(Main(), mainDiv));\r\n\r\npage(\"*\", (ctx) => {\r\n    log(\"ERROR: Page Not Found\", ctx);\r\n    render(html`<h3>Error [client]: Page Not Found</h3>`, mainDiv);\r\n});\r\npage.start();\r\n"],"names":["lit_html_1","utils_1","utils_browser_1","api_keyval_client_1","store_1","nav_1","todo_1"],"mappings":"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"}